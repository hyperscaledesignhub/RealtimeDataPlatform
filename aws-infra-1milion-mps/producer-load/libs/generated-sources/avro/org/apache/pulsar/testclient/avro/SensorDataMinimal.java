/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.pulsar.testclient.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Minimal IoT Sensor Data - Target 300 bytes */
@org.apache.avro.specific.AvroGenerated
public class SensorDataMinimal extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8804129602232218397L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SensorDataMinimal\",\"namespace\":\"org.apache.pulsar.testclient.avro\",\"doc\":\"Minimal IoT Sensor Data - Target 300 bytes\",\"fields\":[{\"name\":\"sensorId\",\"type\":\"string\",\"doc\":\"Sensor ID (max 20 chars)\"},{\"name\":\"value\",\"type\":\"double\",\"doc\":\"Single sensor reading\"},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"Timestamp in milliseconds\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"type\",\"type\":\"string\",\"doc\":\"Sensor type (max 10 chars)\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SensorDataMinimal> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SensorDataMinimal> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SensorDataMinimal> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SensorDataMinimal> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SensorDataMinimal> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SensorDataMinimal to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SensorDataMinimal from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SensorDataMinimal instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SensorDataMinimal fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Sensor ID (max 20 chars) */
  private java.lang.CharSequence sensorId;
  /** Single sensor reading */
  private double value;
  /** Timestamp in milliseconds */
  private long timestamp;
  /** Sensor type (max 10 chars) */
  private java.lang.CharSequence type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SensorDataMinimal() {}

  /**
   * All-args constructor.
   * @param sensorId Sensor ID (max 20 chars)
   * @param value Single sensor reading
   * @param timestamp Timestamp in milliseconds
   * @param type Sensor type (max 10 chars)
   */
  public SensorDataMinimal(java.lang.CharSequence sensorId, java.lang.Double value, java.lang.Long timestamp, java.lang.CharSequence type) {
    this.sensorId = sensorId;
    this.value = value;
    this.timestamp = timestamp;
    this.type = type;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sensorId;
    case 1: return value;
    case 2: return timestamp;
    case 3: return type;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sensorId = (java.lang.CharSequence)value$; break;
    case 1: value = (java.lang.Double)value$; break;
    case 2: timestamp = (java.lang.Long)value$; break;
    case 3: type = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'sensorId' field.
   * @return Sensor ID (max 20 chars)
   */
  public java.lang.CharSequence getSensorId() {
    return sensorId;
  }


  /**
   * Sets the value of the 'sensorId' field.
   * Sensor ID (max 20 chars)
   * @param value the value to set.
   */
  public void setSensorId(java.lang.CharSequence value) {
    this.sensorId = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return Single sensor reading
   */
  public double getValue() {
    return value;
  }


  /**
   * Sets the value of the 'value' field.
   * Single sensor reading
   * @param value the value to set.
   */
  public void setValue(double value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Timestamp in milliseconds
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * Timestamp in milliseconds
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return Sensor type (max 10 chars)
   */
  public java.lang.CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * Sensor type (max 10 chars)
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Creates a new SensorDataMinimal RecordBuilder.
   * @return A new SensorDataMinimal RecordBuilder
   */
  public static org.apache.pulsar.testclient.avro.SensorDataMinimal.Builder newBuilder() {
    return new org.apache.pulsar.testclient.avro.SensorDataMinimal.Builder();
  }

  /**
   * Creates a new SensorDataMinimal RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SensorDataMinimal RecordBuilder
   */
  public static org.apache.pulsar.testclient.avro.SensorDataMinimal.Builder newBuilder(org.apache.pulsar.testclient.avro.SensorDataMinimal.Builder other) {
    if (other == null) {
      return new org.apache.pulsar.testclient.avro.SensorDataMinimal.Builder();
    } else {
      return new org.apache.pulsar.testclient.avro.SensorDataMinimal.Builder(other);
    }
  }

  /**
   * Creates a new SensorDataMinimal RecordBuilder by copying an existing SensorDataMinimal instance.
   * @param other The existing instance to copy.
   * @return A new SensorDataMinimal RecordBuilder
   */
  public static org.apache.pulsar.testclient.avro.SensorDataMinimal.Builder newBuilder(org.apache.pulsar.testclient.avro.SensorDataMinimal other) {
    if (other == null) {
      return new org.apache.pulsar.testclient.avro.SensorDataMinimal.Builder();
    } else {
      return new org.apache.pulsar.testclient.avro.SensorDataMinimal.Builder(other);
    }
  }

  /**
   * RecordBuilder for SensorDataMinimal instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SensorDataMinimal>
    implements org.apache.avro.data.RecordBuilder<SensorDataMinimal> {

    /** Sensor ID (max 20 chars) */
    private java.lang.CharSequence sensorId;
    /** Single sensor reading */
    private double value;
    /** Timestamp in milliseconds */
    private long timestamp;
    /** Sensor type (max 10 chars) */
    private java.lang.CharSequence type;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.pulsar.testclient.avro.SensorDataMinimal.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sensorId)) {
        this.sensorId = data().deepCopy(fields()[0].schema(), other.sensorId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing SensorDataMinimal instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.pulsar.testclient.avro.SensorDataMinimal other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.sensorId)) {
        this.sensorId = data().deepCopy(fields()[0].schema(), other.sensorId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'sensorId' field.
      * Sensor ID (max 20 chars)
      * @return The value.
      */
    public java.lang.CharSequence getSensorId() {
      return sensorId;
    }


    /**
      * Sets the value of the 'sensorId' field.
      * Sensor ID (max 20 chars)
      * @param value The value of 'sensorId'.
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.SensorDataMinimal.Builder setSensorId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.sensorId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sensorId' field has been set.
      * Sensor ID (max 20 chars)
      * @return True if the 'sensorId' field has been set, false otherwise.
      */
    public boolean hasSensorId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'sensorId' field.
      * Sensor ID (max 20 chars)
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.SensorDataMinimal.Builder clearSensorId() {
      sensorId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * Single sensor reading
      * @return The value.
      */
    public double getValue() {
      return value;
    }


    /**
      * Sets the value of the 'value' field.
      * Single sensor reading
      * @param value The value of 'value'.
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.SensorDataMinimal.Builder setValue(double value) {
      validate(fields()[1], value);
      this.value = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * Single sensor reading
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'value' field.
      * Single sensor reading
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.SensorDataMinimal.Builder clearValue() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Timestamp in milliseconds
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * Timestamp in milliseconds
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.SensorDataMinimal.Builder setTimestamp(long value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Timestamp in milliseconds
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Timestamp in milliseconds
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.SensorDataMinimal.Builder clearTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * Sensor type (max 10 chars)
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * Sensor type (max 10 chars)
      * @param value The value of 'type'.
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.SensorDataMinimal.Builder setType(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.type = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * Sensor type (max 10 chars)
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'type' field.
      * Sensor type (max 10 chars)
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.SensorDataMinimal.Builder clearType() {
      type = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SensorDataMinimal build() {
      try {
        SensorDataMinimal record = new SensorDataMinimal();
        record.sensorId = fieldSetFlags()[0] ? this.sensorId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.value = fieldSetFlags()[1] ? this.value : (java.lang.Double) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.lang.Long) defaultValue(fields()[2]);
        record.type = fieldSetFlags()[3] ? this.type : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SensorDataMinimal>
    WRITER$ = (org.apache.avro.io.DatumWriter<SensorDataMinimal>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SensorDataMinimal>
    READER$ = (org.apache.avro.io.DatumReader<SensorDataMinimal>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.sensorId);

    out.writeDouble(this.value);

    out.writeLong(this.timestamp);

    out.writeString(this.type);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.sensorId = in.readString(this.sensorId instanceof Utf8 ? (Utf8)this.sensorId : null);

      this.value = in.readDouble();

      this.timestamp = in.readLong();

      this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.sensorId = in.readString(this.sensorId instanceof Utf8 ? (Utf8)this.sensorId : null);
          break;

        case 1:
          this.value = in.readDouble();
          break;

        case 2:
          this.timestamp = in.readLong();
          break;

        case 3:
          this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










