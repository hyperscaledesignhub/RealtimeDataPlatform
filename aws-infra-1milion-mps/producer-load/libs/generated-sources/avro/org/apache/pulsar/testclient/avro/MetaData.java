/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.pulsar.testclient.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Sensor metadata */
@org.apache.avro.specific.AvroGenerated
public class MetaData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4689384907914873024L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MetaData\",\"namespace\":\"org.apache.pulsar.testclient.avro\",\"doc\":\"Sensor metadata\",\"fields\":[{\"name\":\"manufacturer\",\"type\":\"string\",\"doc\":\"Sensor manufacturer\"},{\"name\":\"model\",\"type\":\"string\",\"doc\":\"Sensor model\"},{\"name\":\"firmwareVersion\",\"type\":\"string\",\"doc\":\"Firmware version\"},{\"name\":\"latitude\",\"type\":\"double\",\"doc\":\"Latitude coordinate\"},{\"name\":\"longitude\",\"type\":\"double\",\"doc\":\"Longitude coordinate\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MetaData> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MetaData> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<MetaData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<MetaData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<MetaData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this MetaData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a MetaData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a MetaData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static MetaData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Sensor manufacturer */
  private java.lang.CharSequence manufacturer;
  /** Sensor model */
  private java.lang.CharSequence model;
  /** Firmware version */
  private java.lang.CharSequence firmwareVersion;
  /** Latitude coordinate */
  private double latitude;
  /** Longitude coordinate */
  private double longitude;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MetaData() {}

  /**
   * All-args constructor.
   * @param manufacturer Sensor manufacturer
   * @param model Sensor model
   * @param firmwareVersion Firmware version
   * @param latitude Latitude coordinate
   * @param longitude Longitude coordinate
   */
  public MetaData(java.lang.CharSequence manufacturer, java.lang.CharSequence model, java.lang.CharSequence firmwareVersion, java.lang.Double latitude, java.lang.Double longitude) {
    this.manufacturer = manufacturer;
    this.model = model;
    this.firmwareVersion = firmwareVersion;
    this.latitude = latitude;
    this.longitude = longitude;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return manufacturer;
    case 1: return model;
    case 2: return firmwareVersion;
    case 3: return latitude;
    case 4: return longitude;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: manufacturer = (java.lang.CharSequence)value$; break;
    case 1: model = (java.lang.CharSequence)value$; break;
    case 2: firmwareVersion = (java.lang.CharSequence)value$; break;
    case 3: latitude = (java.lang.Double)value$; break;
    case 4: longitude = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'manufacturer' field.
   * @return Sensor manufacturer
   */
  public java.lang.CharSequence getManufacturer() {
    return manufacturer;
  }


  /**
   * Sets the value of the 'manufacturer' field.
   * Sensor manufacturer
   * @param value the value to set.
   */
  public void setManufacturer(java.lang.CharSequence value) {
    this.manufacturer = value;
  }

  /**
   * Gets the value of the 'model' field.
   * @return Sensor model
   */
  public java.lang.CharSequence getModel() {
    return model;
  }


  /**
   * Sets the value of the 'model' field.
   * Sensor model
   * @param value the value to set.
   */
  public void setModel(java.lang.CharSequence value) {
    this.model = value;
  }

  /**
   * Gets the value of the 'firmwareVersion' field.
   * @return Firmware version
   */
  public java.lang.CharSequence getFirmwareVersion() {
    return firmwareVersion;
  }


  /**
   * Sets the value of the 'firmwareVersion' field.
   * Firmware version
   * @param value the value to set.
   */
  public void setFirmwareVersion(java.lang.CharSequence value) {
    this.firmwareVersion = value;
  }

  /**
   * Gets the value of the 'latitude' field.
   * @return Latitude coordinate
   */
  public double getLatitude() {
    return latitude;
  }


  /**
   * Sets the value of the 'latitude' field.
   * Latitude coordinate
   * @param value the value to set.
   */
  public void setLatitude(double value) {
    this.latitude = value;
  }

  /**
   * Gets the value of the 'longitude' field.
   * @return Longitude coordinate
   */
  public double getLongitude() {
    return longitude;
  }


  /**
   * Sets the value of the 'longitude' field.
   * Longitude coordinate
   * @param value the value to set.
   */
  public void setLongitude(double value) {
    this.longitude = value;
  }

  /**
   * Creates a new MetaData RecordBuilder.
   * @return A new MetaData RecordBuilder
   */
  public static org.apache.pulsar.testclient.avro.MetaData.Builder newBuilder() {
    return new org.apache.pulsar.testclient.avro.MetaData.Builder();
  }

  /**
   * Creates a new MetaData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MetaData RecordBuilder
   */
  public static org.apache.pulsar.testclient.avro.MetaData.Builder newBuilder(org.apache.pulsar.testclient.avro.MetaData.Builder other) {
    if (other == null) {
      return new org.apache.pulsar.testclient.avro.MetaData.Builder();
    } else {
      return new org.apache.pulsar.testclient.avro.MetaData.Builder(other);
    }
  }

  /**
   * Creates a new MetaData RecordBuilder by copying an existing MetaData instance.
   * @param other The existing instance to copy.
   * @return A new MetaData RecordBuilder
   */
  public static org.apache.pulsar.testclient.avro.MetaData.Builder newBuilder(org.apache.pulsar.testclient.avro.MetaData other) {
    if (other == null) {
      return new org.apache.pulsar.testclient.avro.MetaData.Builder();
    } else {
      return new org.apache.pulsar.testclient.avro.MetaData.Builder(other);
    }
  }

  /**
   * RecordBuilder for MetaData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MetaData>
    implements org.apache.avro.data.RecordBuilder<MetaData> {

    /** Sensor manufacturer */
    private java.lang.CharSequence manufacturer;
    /** Sensor model */
    private java.lang.CharSequence model;
    /** Firmware version */
    private java.lang.CharSequence firmwareVersion;
    /** Latitude coordinate */
    private double latitude;
    /** Longitude coordinate */
    private double longitude;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.pulsar.testclient.avro.MetaData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.manufacturer)) {
        this.manufacturer = data().deepCopy(fields()[0].schema(), other.manufacturer);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.model)) {
        this.model = data().deepCopy(fields()[1].schema(), other.model);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.firmwareVersion)) {
        this.firmwareVersion = data().deepCopy(fields()[2].schema(), other.firmwareVersion);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.latitude)) {
        this.latitude = data().deepCopy(fields()[3].schema(), other.latitude);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.longitude)) {
        this.longitude = data().deepCopy(fields()[4].schema(), other.longitude);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing MetaData instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.pulsar.testclient.avro.MetaData other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.manufacturer)) {
        this.manufacturer = data().deepCopy(fields()[0].schema(), other.manufacturer);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.model)) {
        this.model = data().deepCopy(fields()[1].schema(), other.model);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.firmwareVersion)) {
        this.firmwareVersion = data().deepCopy(fields()[2].schema(), other.firmwareVersion);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.latitude)) {
        this.latitude = data().deepCopy(fields()[3].schema(), other.latitude);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.longitude)) {
        this.longitude = data().deepCopy(fields()[4].schema(), other.longitude);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'manufacturer' field.
      * Sensor manufacturer
      * @return The value.
      */
    public java.lang.CharSequence getManufacturer() {
      return manufacturer;
    }


    /**
      * Sets the value of the 'manufacturer' field.
      * Sensor manufacturer
      * @param value The value of 'manufacturer'.
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.MetaData.Builder setManufacturer(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.manufacturer = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'manufacturer' field has been set.
      * Sensor manufacturer
      * @return True if the 'manufacturer' field has been set, false otherwise.
      */
    public boolean hasManufacturer() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'manufacturer' field.
      * Sensor manufacturer
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.MetaData.Builder clearManufacturer() {
      manufacturer = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'model' field.
      * Sensor model
      * @return The value.
      */
    public java.lang.CharSequence getModel() {
      return model;
    }


    /**
      * Sets the value of the 'model' field.
      * Sensor model
      * @param value The value of 'model'.
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.MetaData.Builder setModel(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.model = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'model' field has been set.
      * Sensor model
      * @return True if the 'model' field has been set, false otherwise.
      */
    public boolean hasModel() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'model' field.
      * Sensor model
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.MetaData.Builder clearModel() {
      model = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'firmwareVersion' field.
      * Firmware version
      * @return The value.
      */
    public java.lang.CharSequence getFirmwareVersion() {
      return firmwareVersion;
    }


    /**
      * Sets the value of the 'firmwareVersion' field.
      * Firmware version
      * @param value The value of 'firmwareVersion'.
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.MetaData.Builder setFirmwareVersion(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.firmwareVersion = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'firmwareVersion' field has been set.
      * Firmware version
      * @return True if the 'firmwareVersion' field has been set, false otherwise.
      */
    public boolean hasFirmwareVersion() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'firmwareVersion' field.
      * Firmware version
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.MetaData.Builder clearFirmwareVersion() {
      firmwareVersion = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'latitude' field.
      * Latitude coordinate
      * @return The value.
      */
    public double getLatitude() {
      return latitude;
    }


    /**
      * Sets the value of the 'latitude' field.
      * Latitude coordinate
      * @param value The value of 'latitude'.
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.MetaData.Builder setLatitude(double value) {
      validate(fields()[3], value);
      this.latitude = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'latitude' field has been set.
      * Latitude coordinate
      * @return True if the 'latitude' field has been set, false otherwise.
      */
    public boolean hasLatitude() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'latitude' field.
      * Latitude coordinate
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.MetaData.Builder clearLatitude() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'longitude' field.
      * Longitude coordinate
      * @return The value.
      */
    public double getLongitude() {
      return longitude;
    }


    /**
      * Sets the value of the 'longitude' field.
      * Longitude coordinate
      * @param value The value of 'longitude'.
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.MetaData.Builder setLongitude(double value) {
      validate(fields()[4], value);
      this.longitude = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'longitude' field has been set.
      * Longitude coordinate
      * @return True if the 'longitude' field has been set, false otherwise.
      */
    public boolean hasLongitude() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'longitude' field.
      * Longitude coordinate
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.MetaData.Builder clearLongitude() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MetaData build() {
      try {
        MetaData record = new MetaData();
        record.manufacturer = fieldSetFlags()[0] ? this.manufacturer : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.model = fieldSetFlags()[1] ? this.model : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.firmwareVersion = fieldSetFlags()[2] ? this.firmwareVersion : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.latitude = fieldSetFlags()[3] ? this.latitude : (java.lang.Double) defaultValue(fields()[3]);
        record.longitude = fieldSetFlags()[4] ? this.longitude : (java.lang.Double) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MetaData>
    WRITER$ = (org.apache.avro.io.DatumWriter<MetaData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MetaData>
    READER$ = (org.apache.avro.io.DatumReader<MetaData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.manufacturer);

    out.writeString(this.model);

    out.writeString(this.firmwareVersion);

    out.writeDouble(this.latitude);

    out.writeDouble(this.longitude);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.manufacturer = in.readString(this.manufacturer instanceof Utf8 ? (Utf8)this.manufacturer : null);

      this.model = in.readString(this.model instanceof Utf8 ? (Utf8)this.model : null);

      this.firmwareVersion = in.readString(this.firmwareVersion instanceof Utf8 ? (Utf8)this.firmwareVersion : null);

      this.latitude = in.readDouble();

      this.longitude = in.readDouble();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.manufacturer = in.readString(this.manufacturer instanceof Utf8 ? (Utf8)this.manufacturer : null);
          break;

        case 1:
          this.model = in.readString(this.model instanceof Utf8 ? (Utf8)this.model : null);
          break;

        case 2:
          this.firmwareVersion = in.readString(this.firmwareVersion instanceof Utf8 ? (Utf8)this.firmwareVersion : null);
          break;

        case 3:
          this.latitude = in.readDouble();
          break;

        case 4:
          this.longitude = in.readDouble();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










