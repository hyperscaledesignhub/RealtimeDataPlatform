/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.pulsar.testclient.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** IoT Sensor Data for Pulsar Performance Testing - Optimized Integer Schema */
@org.apache.avro.specific.AvroGenerated
public class SensorData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3236840679641466159L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SensorData\",\"namespace\":\"org.apache.pulsar.testclient.avro\",\"doc\":\"IoT Sensor Data for Pulsar Performance Testing - Optimized Integer Schema\",\"fields\":[{\"name\":\"sensorId\",\"type\":\"int\",\"doc\":\"Unique sensor identifier (integer for efficiency)\"},{\"name\":\"sensorType\",\"type\":\"int\",\"doc\":\"Type of sensor (1=temperature, 2=humidity, 3=pressure, 4=motion, 5=light, 6=co2, 7=noise, 8=multisensor)\"},{\"name\":\"temperature\",\"type\":\"double\",\"doc\":\"Temperature reading in Celsius\"},{\"name\":\"humidity\",\"type\":\"double\",\"doc\":\"Humidity reading as percentage\"},{\"name\":\"pressure\",\"type\":\"double\",\"doc\":\"Pressure reading in hPa\"},{\"name\":\"batteryLevel\",\"type\":\"double\",\"doc\":\"Battery level as percentage\"},{\"name\":\"status\",\"type\":\"int\",\"doc\":\"Sensor status (1=online, 2=offline, 3=maintenance, 4=error)\"},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"Timestamp in milliseconds since epoch\",\"logicalType\":\"timestamp-millis\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SensorData> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SensorData> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SensorData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SensorData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SensorData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SensorData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SensorData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SensorData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SensorData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unique sensor identifier (integer for efficiency) */
  private int sensorId;
  /** Type of sensor (1=temperature, 2=humidity, 3=pressure, 4=motion, 5=light, 6=co2, 7=noise, 8=multisensor) */
  private int sensorType;
  /** Temperature reading in Celsius */
  private double temperature;
  /** Humidity reading as percentage */
  private double humidity;
  /** Pressure reading in hPa */
  private double pressure;
  /** Battery level as percentage */
  private double batteryLevel;
  /** Sensor status (1=online, 2=offline, 3=maintenance, 4=error) */
  private int status;
  /** Timestamp in milliseconds since epoch */
  private long timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SensorData() {}

  /**
   * All-args constructor.
   * @param sensorId Unique sensor identifier (integer for efficiency)
   * @param sensorType Type of sensor (1=temperature, 2=humidity, 3=pressure, 4=motion, 5=light, 6=co2, 7=noise, 8=multisensor)
   * @param temperature Temperature reading in Celsius
   * @param humidity Humidity reading as percentage
   * @param pressure Pressure reading in hPa
   * @param batteryLevel Battery level as percentage
   * @param status Sensor status (1=online, 2=offline, 3=maintenance, 4=error)
   * @param timestamp Timestamp in milliseconds since epoch
   */
  public SensorData(java.lang.Integer sensorId, java.lang.Integer sensorType, java.lang.Double temperature, java.lang.Double humidity, java.lang.Double pressure, java.lang.Double batteryLevel, java.lang.Integer status, java.lang.Long timestamp) {
    this.sensorId = sensorId;
    this.sensorType = sensorType;
    this.temperature = temperature;
    this.humidity = humidity;
    this.pressure = pressure;
    this.batteryLevel = batteryLevel;
    this.status = status;
    this.timestamp = timestamp;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sensorId;
    case 1: return sensorType;
    case 2: return temperature;
    case 3: return humidity;
    case 4: return pressure;
    case 5: return batteryLevel;
    case 6: return status;
    case 7: return timestamp;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sensorId = (java.lang.Integer)value$; break;
    case 1: sensorType = (java.lang.Integer)value$; break;
    case 2: temperature = (java.lang.Double)value$; break;
    case 3: humidity = (java.lang.Double)value$; break;
    case 4: pressure = (java.lang.Double)value$; break;
    case 5: batteryLevel = (java.lang.Double)value$; break;
    case 6: status = (java.lang.Integer)value$; break;
    case 7: timestamp = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'sensorId' field.
   * @return Unique sensor identifier (integer for efficiency)
   */
  public int getSensorId() {
    return sensorId;
  }


  /**
   * Sets the value of the 'sensorId' field.
   * Unique sensor identifier (integer for efficiency)
   * @param value the value to set.
   */
  public void setSensorId(int value) {
    this.sensorId = value;
  }

  /**
   * Gets the value of the 'sensorType' field.
   * @return Type of sensor (1=temperature, 2=humidity, 3=pressure, 4=motion, 5=light, 6=co2, 7=noise, 8=multisensor)
   */
  public int getSensorType() {
    return sensorType;
  }


  /**
   * Sets the value of the 'sensorType' field.
   * Type of sensor (1=temperature, 2=humidity, 3=pressure, 4=motion, 5=light, 6=co2, 7=noise, 8=multisensor)
   * @param value the value to set.
   */
  public void setSensorType(int value) {
    this.sensorType = value;
  }

  /**
   * Gets the value of the 'temperature' field.
   * @return Temperature reading in Celsius
   */
  public double getTemperature() {
    return temperature;
  }


  /**
   * Sets the value of the 'temperature' field.
   * Temperature reading in Celsius
   * @param value the value to set.
   */
  public void setTemperature(double value) {
    this.temperature = value;
  }

  /**
   * Gets the value of the 'humidity' field.
   * @return Humidity reading as percentage
   */
  public double getHumidity() {
    return humidity;
  }


  /**
   * Sets the value of the 'humidity' field.
   * Humidity reading as percentage
   * @param value the value to set.
   */
  public void setHumidity(double value) {
    this.humidity = value;
  }

  /**
   * Gets the value of the 'pressure' field.
   * @return Pressure reading in hPa
   */
  public double getPressure() {
    return pressure;
  }


  /**
   * Sets the value of the 'pressure' field.
   * Pressure reading in hPa
   * @param value the value to set.
   */
  public void setPressure(double value) {
    this.pressure = value;
  }

  /**
   * Gets the value of the 'batteryLevel' field.
   * @return Battery level as percentage
   */
  public double getBatteryLevel() {
    return batteryLevel;
  }


  /**
   * Sets the value of the 'batteryLevel' field.
   * Battery level as percentage
   * @param value the value to set.
   */
  public void setBatteryLevel(double value) {
    this.batteryLevel = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return Sensor status (1=online, 2=offline, 3=maintenance, 4=error)
   */
  public int getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * Sensor status (1=online, 2=offline, 3=maintenance, 4=error)
   * @param value the value to set.
   */
  public void setStatus(int value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Timestamp in milliseconds since epoch
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * Timestamp in milliseconds since epoch
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Creates a new SensorData RecordBuilder.
   * @return A new SensorData RecordBuilder
   */
  public static org.apache.pulsar.testclient.avro.SensorData.Builder newBuilder() {
    return new org.apache.pulsar.testclient.avro.SensorData.Builder();
  }

  /**
   * Creates a new SensorData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SensorData RecordBuilder
   */
  public static org.apache.pulsar.testclient.avro.SensorData.Builder newBuilder(org.apache.pulsar.testclient.avro.SensorData.Builder other) {
    if (other == null) {
      return new org.apache.pulsar.testclient.avro.SensorData.Builder();
    } else {
      return new org.apache.pulsar.testclient.avro.SensorData.Builder(other);
    }
  }

  /**
   * Creates a new SensorData RecordBuilder by copying an existing SensorData instance.
   * @param other The existing instance to copy.
   * @return A new SensorData RecordBuilder
   */
  public static org.apache.pulsar.testclient.avro.SensorData.Builder newBuilder(org.apache.pulsar.testclient.avro.SensorData other) {
    if (other == null) {
      return new org.apache.pulsar.testclient.avro.SensorData.Builder();
    } else {
      return new org.apache.pulsar.testclient.avro.SensorData.Builder(other);
    }
  }

  /**
   * RecordBuilder for SensorData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SensorData>
    implements org.apache.avro.data.RecordBuilder<SensorData> {

    /** Unique sensor identifier (integer for efficiency) */
    private int sensorId;
    /** Type of sensor (1=temperature, 2=humidity, 3=pressure, 4=motion, 5=light, 6=co2, 7=noise, 8=multisensor) */
    private int sensorType;
    /** Temperature reading in Celsius */
    private double temperature;
    /** Humidity reading as percentage */
    private double humidity;
    /** Pressure reading in hPa */
    private double pressure;
    /** Battery level as percentage */
    private double batteryLevel;
    /** Sensor status (1=online, 2=offline, 3=maintenance, 4=error) */
    private int status;
    /** Timestamp in milliseconds since epoch */
    private long timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.pulsar.testclient.avro.SensorData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sensorId)) {
        this.sensorId = data().deepCopy(fields()[0].schema(), other.sensorId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.sensorType)) {
        this.sensorType = data().deepCopy(fields()[1].schema(), other.sensorType);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.temperature)) {
        this.temperature = data().deepCopy(fields()[2].schema(), other.temperature);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.humidity)) {
        this.humidity = data().deepCopy(fields()[3].schema(), other.humidity);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.pressure)) {
        this.pressure = data().deepCopy(fields()[4].schema(), other.pressure);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.batteryLevel)) {
        this.batteryLevel = data().deepCopy(fields()[5].schema(), other.batteryLevel);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.status)) {
        this.status = data().deepCopy(fields()[6].schema(), other.status);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[7].schema(), other.timestamp);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing SensorData instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.pulsar.testclient.avro.SensorData other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.sensorId)) {
        this.sensorId = data().deepCopy(fields()[0].schema(), other.sensorId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sensorType)) {
        this.sensorType = data().deepCopy(fields()[1].schema(), other.sensorType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.temperature)) {
        this.temperature = data().deepCopy(fields()[2].schema(), other.temperature);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.humidity)) {
        this.humidity = data().deepCopy(fields()[3].schema(), other.humidity);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.pressure)) {
        this.pressure = data().deepCopy(fields()[4].schema(), other.pressure);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.batteryLevel)) {
        this.batteryLevel = data().deepCopy(fields()[5].schema(), other.batteryLevel);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.status)) {
        this.status = data().deepCopy(fields()[6].schema(), other.status);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[7].schema(), other.timestamp);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'sensorId' field.
      * Unique sensor identifier (integer for efficiency)
      * @return The value.
      */
    public int getSensorId() {
      return sensorId;
    }


    /**
      * Sets the value of the 'sensorId' field.
      * Unique sensor identifier (integer for efficiency)
      * @param value The value of 'sensorId'.
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.SensorData.Builder setSensorId(int value) {
      validate(fields()[0], value);
      this.sensorId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sensorId' field has been set.
      * Unique sensor identifier (integer for efficiency)
      * @return True if the 'sensorId' field has been set, false otherwise.
      */
    public boolean hasSensorId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'sensorId' field.
      * Unique sensor identifier (integer for efficiency)
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.SensorData.Builder clearSensorId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sensorType' field.
      * Type of sensor (1=temperature, 2=humidity, 3=pressure, 4=motion, 5=light, 6=co2, 7=noise, 8=multisensor)
      * @return The value.
      */
    public int getSensorType() {
      return sensorType;
    }


    /**
      * Sets the value of the 'sensorType' field.
      * Type of sensor (1=temperature, 2=humidity, 3=pressure, 4=motion, 5=light, 6=co2, 7=noise, 8=multisensor)
      * @param value The value of 'sensorType'.
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.SensorData.Builder setSensorType(int value) {
      validate(fields()[1], value);
      this.sensorType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sensorType' field has been set.
      * Type of sensor (1=temperature, 2=humidity, 3=pressure, 4=motion, 5=light, 6=co2, 7=noise, 8=multisensor)
      * @return True if the 'sensorType' field has been set, false otherwise.
      */
    public boolean hasSensorType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sensorType' field.
      * Type of sensor (1=temperature, 2=humidity, 3=pressure, 4=motion, 5=light, 6=co2, 7=noise, 8=multisensor)
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.SensorData.Builder clearSensorType() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'temperature' field.
      * Temperature reading in Celsius
      * @return The value.
      */
    public double getTemperature() {
      return temperature;
    }


    /**
      * Sets the value of the 'temperature' field.
      * Temperature reading in Celsius
      * @param value The value of 'temperature'.
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.SensorData.Builder setTemperature(double value) {
      validate(fields()[2], value);
      this.temperature = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'temperature' field has been set.
      * Temperature reading in Celsius
      * @return True if the 'temperature' field has been set, false otherwise.
      */
    public boolean hasTemperature() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'temperature' field.
      * Temperature reading in Celsius
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.SensorData.Builder clearTemperature() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'humidity' field.
      * Humidity reading as percentage
      * @return The value.
      */
    public double getHumidity() {
      return humidity;
    }


    /**
      * Sets the value of the 'humidity' field.
      * Humidity reading as percentage
      * @param value The value of 'humidity'.
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.SensorData.Builder setHumidity(double value) {
      validate(fields()[3], value);
      this.humidity = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'humidity' field has been set.
      * Humidity reading as percentage
      * @return True if the 'humidity' field has been set, false otherwise.
      */
    public boolean hasHumidity() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'humidity' field.
      * Humidity reading as percentage
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.SensorData.Builder clearHumidity() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'pressure' field.
      * Pressure reading in hPa
      * @return The value.
      */
    public double getPressure() {
      return pressure;
    }


    /**
      * Sets the value of the 'pressure' field.
      * Pressure reading in hPa
      * @param value The value of 'pressure'.
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.SensorData.Builder setPressure(double value) {
      validate(fields()[4], value);
      this.pressure = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'pressure' field has been set.
      * Pressure reading in hPa
      * @return True if the 'pressure' field has been set, false otherwise.
      */
    public boolean hasPressure() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'pressure' field.
      * Pressure reading in hPa
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.SensorData.Builder clearPressure() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'batteryLevel' field.
      * Battery level as percentage
      * @return The value.
      */
    public double getBatteryLevel() {
      return batteryLevel;
    }


    /**
      * Sets the value of the 'batteryLevel' field.
      * Battery level as percentage
      * @param value The value of 'batteryLevel'.
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.SensorData.Builder setBatteryLevel(double value) {
      validate(fields()[5], value);
      this.batteryLevel = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'batteryLevel' field has been set.
      * Battery level as percentage
      * @return True if the 'batteryLevel' field has been set, false otherwise.
      */
    public boolean hasBatteryLevel() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'batteryLevel' field.
      * Battery level as percentage
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.SensorData.Builder clearBatteryLevel() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * Sensor status (1=online, 2=offline, 3=maintenance, 4=error)
      * @return The value.
      */
    public int getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * Sensor status (1=online, 2=offline, 3=maintenance, 4=error)
      * @param value The value of 'status'.
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.SensorData.Builder setStatus(int value) {
      validate(fields()[6], value);
      this.status = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * Sensor status (1=online, 2=offline, 3=maintenance, 4=error)
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'status' field.
      * Sensor status (1=online, 2=offline, 3=maintenance, 4=error)
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.SensorData.Builder clearStatus() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Timestamp in milliseconds since epoch
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * Timestamp in milliseconds since epoch
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.SensorData.Builder setTimestamp(long value) {
      validate(fields()[7], value);
      this.timestamp = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Timestamp in milliseconds since epoch
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Timestamp in milliseconds since epoch
      * @return This builder.
      */
    public org.apache.pulsar.testclient.avro.SensorData.Builder clearTimestamp() {
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SensorData build() {
      try {
        SensorData record = new SensorData();
        record.sensorId = fieldSetFlags()[0] ? this.sensorId : (java.lang.Integer) defaultValue(fields()[0]);
        record.sensorType = fieldSetFlags()[1] ? this.sensorType : (java.lang.Integer) defaultValue(fields()[1]);
        record.temperature = fieldSetFlags()[2] ? this.temperature : (java.lang.Double) defaultValue(fields()[2]);
        record.humidity = fieldSetFlags()[3] ? this.humidity : (java.lang.Double) defaultValue(fields()[3]);
        record.pressure = fieldSetFlags()[4] ? this.pressure : (java.lang.Double) defaultValue(fields()[4]);
        record.batteryLevel = fieldSetFlags()[5] ? this.batteryLevel : (java.lang.Double) defaultValue(fields()[5]);
        record.status = fieldSetFlags()[6] ? this.status : (java.lang.Integer) defaultValue(fields()[6]);
        record.timestamp = fieldSetFlags()[7] ? this.timestamp : (java.lang.Long) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SensorData>
    WRITER$ = (org.apache.avro.io.DatumWriter<SensorData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SensorData>
    READER$ = (org.apache.avro.io.DatumReader<SensorData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.sensorId);

    out.writeInt(this.sensorType);

    out.writeDouble(this.temperature);

    out.writeDouble(this.humidity);

    out.writeDouble(this.pressure);

    out.writeDouble(this.batteryLevel);

    out.writeInt(this.status);

    out.writeLong(this.timestamp);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.sensorId = in.readInt();

      this.sensorType = in.readInt();

      this.temperature = in.readDouble();

      this.humidity = in.readDouble();

      this.pressure = in.readDouble();

      this.batteryLevel = in.readDouble();

      this.status = in.readInt();

      this.timestamp = in.readLong();

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.sensorId = in.readInt();
          break;

        case 1:
          this.sensorType = in.readInt();
          break;

        case 2:
          this.temperature = in.readDouble();
          break;

        case 3:
          this.humidity = in.readDouble();
          break;

        case 4:
          this.pressure = in.readDouble();
          break;

        case 5:
          this.batteryLevel = in.readDouble();
          break;

        case 6:
          this.status = in.readInt();
          break;

        case 7:
          this.timestamp = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










