# ================================================================================
# Multi-Stage Dockerfile for IoT Performance Producer (pulsar-sensor-perf)
# Builds from Apache Pulsar 4.1.1 source with custom IoTPerformanceProducer
# ================================================================================
# Stage 1: Build Pulsar testclient with IoTPerformanceProducer
# ================================================================================
FROM maven:3.9-eclipse-temurin-17 AS builder

WORKDIR /build

# Download and extract Pulsar 4.1.1 source
RUN apt-get update && apt-get install -y wget && \
    wget https://archive.apache.org/dist/pulsar/pulsar-4.1.1/apache-pulsar-4.1.1-src.tar.gz && \
    tar -xzf apache-pulsar-4.1.1-src.tar.gz && \
    rm apache-pulsar-4.1.1-src.tar.gz && \
    mv apache-pulsar-4.1.1-src pulsar-src

# Copy custom IoTPerformanceProducer.java
COPY IoTPerformanceProducer.java /build/pulsar-src/pulsar-testclient/src/main/java/org/apache/pulsar/testclient/

# Build only the pulsar-testclient module (much faster than building entire Pulsar)
WORKDIR /build/pulsar-src
RUN mvn clean install -pl pulsar-testclient -am -DskipTests -Dspotbugs.skip=true -Drat.skip=true -Dlicense.skip=true -Dcheckstyle.skip=true && \
    cd pulsar-testclient && \
    mvn dependency:copy-dependencies -DoutputDirectory=target/dependency

# ================================================================================
# Stage 2: Runtime Image
# ================================================================================
FROM --platform=linux/amd64 eclipse-temurin:17-jre-alpine

# Install bash for better container debugging
RUN apk add --no-cache bash

# Create app directory
WORKDIR /app

# Copy built artifacts from builder stage
COPY --from=builder /build/pulsar-src/pulsar-testclient/target/pulsar-testclient.jar /app/target/pulsar-testclient.jar
COPY --from=builder /build/pulsar-src/pulsar-testclient/target/dependency /app/target/dependency

# Copy our custom pulsar-sensor-perf script (better than the one in Pulsar source)
COPY pulsar-sensor-perf /app/pulsar-sensor-perf
RUN chmod +x /app/pulsar-sensor-perf

# Copy the entrypoint script for device ID distribution
COPY entrypoint.sh /app/entrypoint.sh
RUN chmod +x /app/entrypoint.sh

# Create logs directory
RUN mkdir -p /app/logs

# Set default environment variables
ENV PULSAR_URL="pulsar://localhost:6650" \
    PULSAR_TOPIC="persistent://public/default/iot-sensor-data" \
    MESSAGE_RATE="250000" \
    TOTAL_DEVICE_COUNT="17000" \
    NUM_REPLICAS="3" \
    NUM_MESSAGES="0" \
    STATS_INTERVAL="10" \
    USE_AVRO="true" \
    SCHEMA_FILE="" \
    SCHEMA_REGISTRY_URL="" \
    JAVA_OPTS="-Xms512m -Xmx1024m -XX:+UseG1GC"

# Create a non-root user for security
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup && \
    chown -R appuser:appgroup /app
USER appuser

# Expose port for metrics (if needed)
EXPOSE 8080

# Health check to ensure the producer is running
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD ps aux | grep -v grep | grep IoTPerformanceProducer || exit 1

# Run the IoT Performance Producer with dynamic device ID distribution
ENTRYPOINT ["/app/entrypoint.sh"]

# Default command arguments (topic name)
# Device ID ranges are automatically calculated by entrypoint.sh based on NUM_REPLICAS and pod instance
CMD ["persistent://public/default/iot-sensor-data"]
