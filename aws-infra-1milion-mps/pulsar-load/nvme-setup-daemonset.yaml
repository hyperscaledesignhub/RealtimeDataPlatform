apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nvme-disk-setup
  namespace: kube-system
spec:
  selector:
    matchLabels:
      name: nvme-disk-setup
  template:
    metadata:
      labels:
        name: nvme-disk-setup
    spec:
      hostPID: true
      hostNetwork: true
      initContainers:
      - name: setup-nvme
        image: alpine:latest
        securityContext:
          privileged: true
        command:
        - sh
        - -c
        - |
          #!/bin/sh
          set -e
          
          # Only run on nodes with role=bookkeeper
          echo "Running on EKS BookKeeper node"
          echo "Checking node labels..."
          
          # Install necessary tools
          echo "Installing required tools..."
          apk add --no-cache e2fsprogs util-linux
          echo "✓ Tools installed"
          
          echo "=== NVMe Disk Setup Started ==="
          
          # 1. Identify Available NVMe Devices
          echo "Step 1: Identifying NVMe devices..."
          if command -v lsblk >/dev/null 2>&1; then
            echo "Available block devices:"
            lsblk
          fi
          
          # Check for NVMe devices specifically
          echo "Looking for NVMe devices..."
          ls -la /dev/nvme* || echo "No NVMe devices found in /dev/"
          
          # Wait for NVMe device to be available (from original terraform logic)
          NVME_DEVICE="/dev/nvme0n1"
          echo "Waiting for NVMe device $NVME_DEVICE to be available..."
          while [ ! -e $NVME_DEVICE ]; do
            echo "  Waiting for $NVME_DEVICE..."
            sleep 5
          done
          echo "✓ NVMe device $NVME_DEVICE found"
          
          # 2. Check if the Disk Needs Formatting
          echo "Step 2: Checking if disk needs formatting..."
          if command -v file >/dev/null 2>&1; then
            DISK_INFO=$(file -s $NVME_DEVICE)
            echo "Disk info: $DISK_INFO"
            if echo "$DISK_INFO" | grep -q "data"; then
              echo "  Disk needs formatting"
              NEEDS_FORMAT=true
            else
              echo "  Disk already has a filesystem"
              NEEDS_FORMAT=false
            fi
          else
            echo "  'file' command not available, will format anyway"
            NEEDS_FORMAT=true
          fi
          
          # 3. Create a File System (if needed)
          if [ "$NEEDS_FORMAT" = true ]; then
            echo "Step 3: Formatting NVMe disk with ext4..."
            if command -v mkfs.ext4 >/dev/null 2>&1; then
              mkfs.ext4 -F $NVME_DEVICE
              echo "✓ Disk formatted with ext4"
            else
              echo "  mkfs.ext4 not available, trying generic mkfs..."
              mkfs -t ext4 $NVME_DEVICE
              echo "✓ Disk formatted with ext4"
            fi
          else
            echo "Step 3: Skipping format - disk already has filesystem"
          fi
          
          # 4. Create Mount Point
          echo "Step 4: Creating mount point..."
          mkdir -p /host/mnt/bookkeeper
          echo "✓ Mount point /mnt/bookkeeper created"
          
          # 5. Mount the Disk
          echo "Step 5: Mounting NVMe disk..."
          # Check if already mounted
          if mount | grep -q "/host/mnt/bookkeeper"; then
            echo "  /mnt/bookkeeper is already mounted, unmounting first..."
            umount /host/mnt/bookkeeper || true
          fi
          
          mount $NVME_DEVICE /host/mnt/bookkeeper
          echo "✓ NVMe disk mounted to /mnt/bookkeeper"
          
          # 6. Verify the Mount
          echo "Step 6: Verifying mount..."
          echo "Disk usage:"
          df -h /host/mnt/bookkeeper
          echo "Block devices:"
          lsblk | grep -E "(nvme|bookkeeper)" || echo "No matching entries"
          
          # 7. Set Proper Permissions
          echo "Step 7: Setting permissions..."
          chown -R 1000:1000 /host/mnt/bookkeeper
          chmod 755 /host/mnt/bookkeeper
          echo "✓ Permissions set (owner: 1000:1000, mode: 755)"
          
          # 8. Make Mount Persistent
          echo "Step 8: Making mount persistent..."
          # Get UUID for persistent mounting
          if command -v blkid >/dev/null 2>&1; then
            UUID=$(blkid -s UUID -o value $NVME_DEVICE)
            echo "Device UUID: $UUID"
            
            # Add to fstab if not already present
            FSTAB_ENTRY="UUID=$UUID /mnt/bookkeeper ext4 defaults,noatime,nofail 0 2"
            if ! grep -q "$UUID" /host/etc/fstab; then
              echo "$FSTAB_ENTRY" >> /host/etc/fstab
              echo "✓ Added entry to /etc/fstab with UUID"
            else
              echo "✓ Entry already exists in /etc/fstab"
            fi
          else
            # Fallback to device name
            FSTAB_ENTRY="$NVME_DEVICE /mnt/bookkeeper ext4 defaults,noatime,nofail 0 2"
            if ! grep -q "$NVME_DEVICE" /host/etc/fstab; then
              echo "$FSTAB_ENTRY" >> /host/etc/fstab
              echo "✓ Added entry to /etc/fstab with device name"
            else
              echo "✓ Entry already exists in /etc/fstab"
            fi
          fi
          
          # Create BookKeeper directory structure
          echo "Step 9: Creating BookKeeper directory structure..."
          mkdir -p /host/mnt/bookkeeper/journal
          mkdir -p /host/mnt/bookkeeper/ledgers
          
          # Set permissions for subdirectories
          chown -R 1000:1000 /host/mnt/bookkeeper
          chmod -R 755 /host/mnt/bookkeeper
          
          echo "Directory structure created:"
          ls -la /host/mnt/bookkeeper/
          
          echo "Verifying directories exist:"
          test -d /host/mnt/bookkeeper && echo "✓ /mnt/bookkeeper exists"
          test -d /host/mnt/bookkeeper/journal && echo "✓ /mnt/bookkeeper/journal exists"
          test -d /host/mnt/bookkeeper/ledgers && echo "✓ /mnt/bookkeeper/ledgers exists"
          
          echo "=== NVMe Disk Setup Completed Successfully ==="
          echo "Final mount verification:"
          df -h /host/mnt/bookkeeper
          mount | grep bookkeeper || echo "Mount verification failed"
        volumeMounts:
        - name: host-dev
          mountPath: /dev
        - name: host-mnt
          mountPath: /host/mnt
          mountPropagation: Bidirectional
        - name: host-etc
          mountPath: /host/etc
        - name: host-kubernetes
          mountPath: /host/etc/kubernetes
      containers:
      - name: pause
        image: gcr.io/google_containers/pause:3.1
      nodeSelector:
        node-type: bookkeeper
      tolerations:
      - key: "pulsar"
        value: "bookkeeper"
        effect: "NoSchedule"
      volumes:
      - name: host-dev
        hostPath:
          path: /dev
      - name: host-mnt
        hostPath:
          path: /mnt
      - name: host-etc
        hostPath:
          path: /etc
      - name: host-kubernetes
        hostPath:
          path: /etc/kubernetes
---
# StorageClass for local NVMe storage with proper configuration
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: local-nvme
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
reclaimPolicy: Delete
---
# Create PersistentVolumes for each BookKeeper pod
# These will be dynamically bound to PVCs when BookKeeper pods are created
apiVersion: v1
kind: PersistentVolume
metadata:
  name: bookkeeper-nvme-journal-0
  labels:
    type: local-nvme
    component: bookkeeper
    storage-type: journal
spec:
  capacity:
    storage: 100Gi
  accessModes:
  - ReadWriteOnce
  storageClassName: local-nvme
  local:
    path: /mnt/bookkeeper/journal
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: node-type
          operator: In
          values:
          - bookkeeper
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: bookkeeper-nvme-ledgers-0
  labels:
    type: local-nvme
    component: bookkeeper
    storage-type: ledgers
spec:
  capacity:
    storage: 300Gi
  accessModes:
  - ReadWriteOnce
  storageClassName: local-nvme
  local:
    path: /mnt/bookkeeper/ledgers
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: node-type
          operator: In
          values:
          - bookkeeper
---
# Repeat for other BookKeeper nodes (1-3)
apiVersion: v1
kind: PersistentVolume
metadata:
  name: bookkeeper-nvme-journal-1
  labels:
    type: local-nvme
    component: bookkeeper
    storage-type: journal
spec:
  capacity:
    storage: 100Gi
  accessModes:
  - ReadWriteOnce
  storageClassName: local-nvme
  local:
    path: /mnt/bookkeeper/journal
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: node-type
          operator: In
          values:
          - bookkeeper
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: bookkeeper-nvme-ledgers-1
  labels:
    type: local-nvme
    component: bookkeeper
    storage-type: ledgers
spec:
  capacity:
    storage: 300Gi
  accessModes:
  - ReadWriteOnce
  storageClassName: local-nvme
  local:
    path: /mnt/bookkeeper/ledgers
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: node-type
          operator: In
          values:
          - bookkeeper
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: bookkeeper-nvme-journal-2
  labels:
    type: local-nvme
    component: bookkeeper
    storage-type: journal
spec:
  capacity:
    storage: 100Gi
  accessModes:
  - ReadWriteOnce
  storageClassName: local-nvme
  local:
    path: /mnt/bookkeeper/journal
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: node-type
          operator: In
          values:
          - bookkeeper
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: bookkeeper-nvme-ledgers-2
  labels:
    type: local-nvme
    component: bookkeeper
    storage-type: ledgers
spec:
  capacity:
    storage: 300Gi
  accessModes:
  - ReadWriteOnce
  storageClassName: local-nvme
  local:
    path: /mnt/bookkeeper/ledgers
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: node-type
          operator: In
          values:
          - bookkeeper
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: bookkeeper-nvme-journal-3
  labels:
    type: local-nvme
    component: bookkeeper
    storage-type: journal
spec:
  capacity:
    storage: 100Gi
  accessModes:
  - ReadWriteOnce
  storageClassName: local-nvme
  local:
    path: /mnt/bookkeeper/journal
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: node-type
          operator: In
          values:
          - bookkeeper
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: bookkeeper-nvme-ledgers-3
  labels:
    type: local-nvme
    component: bookkeeper
    storage-type: ledgers
spec:
  capacity:
    storage: 300Gi
  accessModes:
  - ReadWriteOnce
  storageClassName: local-nvme
  local:
    path: /mnt/bookkeeper/ledgers
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: node-type
          operator: In
          values:
          - bookkeeper